#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Nov  7 14:22:21 2022

Script to correlate meeting evaluations to preferential hub proportions
i.e. is the extent to which someone fulfilled their preferred role in the meeting, correlated to how people evaluate the meeting?
Also includes scatterplots with regression line

@author: m.bet
"""

## 0. Import packages
import numpy as np
import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
from statsmodels.tools.sm_exceptions import ConvergenceWarning
import os
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure


## 0. Set working directory
os.chdir('/mnt/resource/m.bet')

## 1. Load data (header=0 takes the first row as column names)
data = pd.read_csv('hubprefcorr.txt', sep='\t', header=0)

#Take out rows that contain missing data
data_new = data.dropna()

## 2.2 Build linear mixed models for each survey item (mixed bc clustered data)
varis = ['effect','worth','overall','motivation','education','translation','connection','understand','mood']
coefs = [] # make into array
pvals = []

for item in data_new.iloc[:,3:]:
    string = "{} ~ hub_pref_prop".format(item)
    md = smf.mixedlm(string, data_new, groups=data_new["Name"])
    mdf = md.fit()
    print(string)
    print(mdf.params)
    print(mdf.pvalues)
    coefs.append(mdf.params)
    pvals.append(mdf.pvalues) # No sig results
    
# 2.2 Calculate the same for all values taken together (overall ratings)
data_new['total'] = data_new[varis].sum(axis=1)

md_tot = smf.mixedlm("total ~ hub_pref_prop", data_new, groups=data_new["Name"])
mdf_tot = md_tot.fit()
print(mdf_tot.params)
print(mdf_tot.pvalues)
coefs.append(mdf_tot.params)
pvals.append(mdf_tot.pvalues)

#plt.rcParams["figure.figsize"] = [4,4]

x = data_new['hub_pref_prop']
y = data_new['total']
plot_total = sns.regplot(x,y)
plt.title('Overall evaluation of the meeting')
plt.xlabel('Preferred hubness')
plt.ylabel('Meeting evaluation')
plot_total.figure.savefig("hubpref_total.png")

    
## 3. Generate scatterplot grid of regression
plt.rcParams["figure.figsize"] = [20,20]

# 3.1 Effect
x = data_new['hub_pref_prop']
y = data_new['effect']
plt.subplot(3,3,1)
plot_effect = sns.regplot(x, y)
plt.title('Overall value in helping you improve your effectiveness?')
plt.xlabel('Preferred hubness')
plt.ylabel('Perceived improved effectiveness')
plot_effect.figure.savefig("hubpref_effect.png")

# 3.2 Worth
y = data_new['worth']
plt.subplot(3,3,2)
plot_worth = sns.regplot(x, y)
plt.title('Was the meeting well worth the investment?')
plt.xlabel('Preferred hubness')
plt.ylabel('Worth the investment')
plot_worth.figure.savefig("hubpref_worth.png")

# 3.3 Overall
y = data_new['overall']
plt.subplot(3,3,3)
plot_overall = sns.regplot(x, y)
plt.title('Satisfaction with overall meeting experience?')
plt.xlabel('Preferred hubness')
plt.ylabel('Meeting experience')
plot_overall.figure.savefig("hubpref_overall.png")

# 3.4 Motivation
y = data_new['motivation']
plt.subplot(3,3,4)
plot_motivation = sns.regplot(x, y)
plt.title('Was the meeting motivating to you personally?')
plt.ylabel('Motivating')
plt.xlabel('Preferred hubness')
plot_motivation.figure.savefig("hubpref_motivation.png")

# 3.5 Education
y = data_new['education']
plt.subplot(3,3,5)
plot_education = sns.regplot(x, y)
plt.title('Quality of the educational value of the meeting?')
plt.xlabel('Preferred hubness')
plt.ylabel('Educational value')
plot_education.figure.savefig("hubpref_education.png")

# 3.6 Translation
y = data_new['translation']
plt.subplot(3,3,6)
plot_translation = sns.regplot(x, y)
plt.title('How translational do you think the meeting was?')
plt.xlabel('Preferred hubness')
plt.ylabel('Translational')
plot_translation.figure.savefig("hubpref_translation.png")

# 3.7 Connection
y = data_new['connection']
plt.subplot(3,3,7)
plot_connection = sns.regplot(x, y)
plt.title('Did the meeting spark a feeling of connection with the group?')
plt.xlabel('Preferred hubness')
plt.ylabel('Group connection')
plot_connection.figure.savefig("hubpref_connection.png")

# 3.8 Understand
y = data_new['understand']
plt.subplot(3,3,8)
plot_understand = sns.regplot(x, y)
plt.title('Did you understand the topics discussed in the meeting?')
plt.xlabel('Preferred hubness')
plt.ylabel('Understandable')
plot_understand.figure.savefig("hubpref_understand.png")

# 3.9 Mood
y = data_new['mood']
plt.subplot(3,3,9)
plot_mood = sns.regplot(x, y)
plt.title('How was your general mood before the start of the meeting?')
plt.xlabel('Preferred hubness')
plt.ylabel('General mood')
plot_mood.figure.savefig("hubpref_mood.png")

# Now save the plot grid from the plots window
